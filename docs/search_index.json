[
["index.html", "学习github 序言", " 学习github 书囊无底 2020-01-01 序言 为了记录学习github的过程，建立这本书． 庖丁之解牛， 伯牙 之操琴， 羿 之发羽， 僚 之弄丸，古之所谓神技也。 — 清·龚自珍 《明良论四》 "],
["总体把握.html", "1 总体把握", " 1 总体把握 学习一个新的事物，最好的方式是依据常识来做一个对照． 先回答github是什么？ 日常我们有什么活动和github类似？ 依据日常活动的步骤，对照github的步骤． "],
["github是什么.html", "1.1 github是什么", " 1.1 github是什么 github的功能是把本地电脑上和github相互联系，互相传送资料． "],
["日常我们有什么活动和github类似.html", "1.2 日常我们有什么活动和github类似", " 1.2 日常我们有什么活动和github类似 想象力贫乏了，我现在能想到的就是在一个出版公司旗下，多个作者协同写作．就先按照这个类比来吧，也许以后有一个很好的参照物．世间没有完美的事，以后有更好的参照物，再来修改． "],
["对照.html", "1.3 对照", " 1.3 对照 依据以上的想象，下面每章一个步骤，来叙述github的使用过程． "],
["重复.html", "1.4 重复", " 1.4 重复 不是简单的重复，而是从不同的角度重复做做，比盲目的背诵要好很多． "],
["签约.html", "2 签约", " 2 签约 作者和出版商首先要签约，这样才能互相联系．签约的过程，在github上，就体现在建立联系． "],
["确定出版商.html", "2.1 确定出版商", " 2.1 确定出版商 找到github，确定你要使用它作为出版商． 在github上面注册一个帐号．进入github网址点击这里进入, 输入用户名，邮箱及密码注册． "],
["建立联系.html", "2.2 建立联系", " 2.2 建立联系 github会给你一个办公室，用来交稿. 这是一个互动的程序，你也需要告诉github你自己创作的地方，这样就在你和github之间就建立了联系. 这里涉及两个地点，github上的办公室，你的创作地点．术语仓库, github上的办公室，叫远程仓库, 你的创作地点在你电脑上的文件夹，术语本地仓库. 建立远程仓库 前面注册过了，登录你的github帐号，点击Repository（仓库），创建一个远程仓库． 建立本地仓库 在你的github仓库，点击clone or download，复制你的仓库网络地址． cd到你的文件夹 # 比如你要去wang这个文件夹 cd ~/wang/ # 当然可以直接在图形窗口点击进去，就像windows一样 git clone # git clone 和你的github仓库取得联系 # 你上面复制出来是什么网址，就用那一个 git clone &lt;你复制的网址&gt; 建立本地仓库的过程，要注意的是，你需要和远程仓库取得联系，你不可能在本地建立一个文件夹就可以和远程仓库去的联系，你必须走一定的程序．一个方法是，在你建立的远程仓库获得仓库地址，在你想作为本地仓库的文件夹下，用git命令创建. git命令会自动给你创建一个.git的文件，用来建立联系． 做完上面的步骤，你应该会在本地仓库里面，有一个.git的文件夹．联系已经建立，开始写作． 可以用remote命令查看你的远程仓库（确认你完成了上面的操作），在用rmote查询后，你会看到一个origin加上网址的两行输出．origin是后面的网址的别名，方便后面输入网址时直接输入origin代替. git remote -v 还有另外一种建立仓库的形式，这中方式和前面相反，先在你的本地电脑建立仓库，再去连接github上的远程仓库． 比如你的本地电脑建立了一个文件夹，叫localrepository的仓库，进入这个文件夹，做一下操作： cd 进localrepository # 初始化文件夹 git init "],
["写作.html", "3 写作", " 3 写作 写作的大致应该有这样的过程 写入文字 根据自身情况，选择文字编辑器．相当与选择纸张和笔．写入文字后，使用add命令，让git软件跟踪这个文件，并把修改加进来准备提交给远程仓库．一定要把本地电脑的仓库，和github上的仓库做一个区分，这样才能理解为什么使用add命令．你写的文字在你本地的电脑上，通过一定的程序来决定那些文件提交，那些不提交．这和写作有相似之处，你写文章的过程，必然会选择那些文字保留，那些不保留．（git不会主动跟踪文件，需要你下命令，这样做的好处是，在思考不成熟的时候，可以写到一些git不跟踪的文件里面，这样最终成稿不会包含他们）． # 比如你写了一个叫index.html的文件，git跟踪文件变动命令 git add index.html 修改 文章千古事，写了文章，修改就是曲中之意．只要前面使用add命令的文件，git会自动跟踪我们作出的修改． # 查询你的文章的状态（未修改，修改，确稿，定稿) git status # 确认修改和跟踪的命令是同一个 git add 审稿 审稿是和平时理解不太一样的地方．比如我们写的文章以章为单位，每章是一个文件．我们修改了很多处原稿，但是我们只想让其中的第二章确认修改，其他的修改我们想再斟酌一下，这个时候审稿就很有作用了．选择你需要的修改第二章确稿，没有确认的部分不会出现在你的github文章里面(在你的本地电脑里面，但是还没有确稿）． # 比如你确认index.html的修改有效, 同前面一样的命令． git add index.html # 你可以确认全部修改有效，同时也在这个时候，git开始跟踪你的文件变化 git add . 定稿 定稿在gibhub上有很重要的作用．由于是电脑，github能做所谓的照相功能．你从开始写作到最终出版的过程看作一个时间段的话，git可以存你想要保存的时间点，你需要的，可以随时回到当时的状态．可以看作游戏的回放功能，你保存了游戏的话，可以选几个时间点从哪里开始游戏．同时，它也是文章最后的样子，经过定稿，文章从修改到审稿后的效果，就会呈现出来了． # 定稿，-m 意思comment, 给一个提示信息，便于你以后找回 git commit -m &quot;修改了index.html文件&quot; 注意 以上的过程，是一个循环的过程，做好一部分，定稿一部分．不满意，用定稿的照相功能回到你想要的阶段，从新开始．这也是和平时写作概念不一样的地方，手工写作，一般会最后再确认文章的样子，先写文章的内容，而电脑可以随时看到文章的样子. "]
]
